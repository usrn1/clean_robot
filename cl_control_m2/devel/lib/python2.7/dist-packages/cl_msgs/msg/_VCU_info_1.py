# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cl_msgs/VCU_info_1.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VCU_info_1(genpy.Message):
  _md5sum = "317dc21bd93b5222cd2a769eb3197f81"
  _type = "cl_msgs/VCU_info_1"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Angle_F
float32 Angle_R
uint16 LF_Rpm
uint16 RF_Rpm
uint16 LR_Rpm
uint16 RR_Rpm
"""
  __slots__ = ['Angle_F','Angle_R','LF_Rpm','RF_Rpm','LR_Rpm','RR_Rpm']
  _slot_types = ['float32','float32','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Angle_F,Angle_R,LF_Rpm,RF_Rpm,LR_Rpm,RR_Rpm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VCU_info_1, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Angle_F is None:
        self.Angle_F = 0.
      if self.Angle_R is None:
        self.Angle_R = 0.
      if self.LF_Rpm is None:
        self.LF_Rpm = 0
      if self.RF_Rpm is None:
        self.RF_Rpm = 0
      if self.LR_Rpm is None:
        self.LR_Rpm = 0
      if self.RR_Rpm is None:
        self.RR_Rpm = 0
    else:
      self.Angle_F = 0.
      self.Angle_R = 0.
      self.LF_Rpm = 0
      self.RF_Rpm = 0
      self.LR_Rpm = 0
      self.RR_Rpm = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f4H().pack(_x.Angle_F, _x.Angle_R, _x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Angle_F, _x.Angle_R, _x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm,) = _get_struct_2f4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f4H().pack(_x.Angle_F, _x.Angle_R, _x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Angle_F, _x.Angle_R, _x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm,) = _get_struct_2f4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4H = None
def _get_struct_2f4H():
    global _struct_2f4H
    if _struct_2f4H is None:
        _struct_2f4H = struct.Struct("<2f4H")
    return _struct_2f4H
