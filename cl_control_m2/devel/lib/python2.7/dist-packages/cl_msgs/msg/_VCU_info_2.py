# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cl_msgs/VCU_info_2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VCU_info_2(genpy.Message):
  _md5sum = "d1fba2325979e73c72ceeacbad9e46de"
  _type = "cl_msgs/VCU_info_2"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 GearPosition_LF
uint8 GearPosition_RF
uint8 GearPosition_LR
uint8 GearPosition_RR
uint8 VCU_Life_Signal
uint8 VCU_Mode
uint8 EPB_Status
uint8 IPC_Status
uint8 Hardware_Error_Level
uint8 RemoteController_Status
uint8 SES_F_En_Status
uint8 SES_R_En_Status
uint8 DBS_Status
float32 Pressure
uint8 SES_F_Error_Level
uint8 SES_R_Error_Level
uint8 BMS_Error
uint8 DCDC_Error
uint8 EPB_Error
uint8 DBS_ErrorCode"""
  __slots__ = ['GearPosition_LF','GearPosition_RF','GearPosition_LR','GearPosition_RR','VCU_Life_Signal','VCU_Mode','EPB_Status','IPC_Status','Hardware_Error_Level','RemoteController_Status','SES_F_En_Status','SES_R_En_Status','DBS_Status','Pressure','SES_F_Error_Level','SES_R_Error_Level','BMS_Error','DCDC_Error','EPB_Error','DBS_ErrorCode']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GearPosition_LF,GearPosition_RF,GearPosition_LR,GearPosition_RR,VCU_Life_Signal,VCU_Mode,EPB_Status,IPC_Status,Hardware_Error_Level,RemoteController_Status,SES_F_En_Status,SES_R_En_Status,DBS_Status,Pressure,SES_F_Error_Level,SES_R_Error_Level,BMS_Error,DCDC_Error,EPB_Error,DBS_ErrorCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VCU_info_2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.GearPosition_LF is None:
        self.GearPosition_LF = 0
      if self.GearPosition_RF is None:
        self.GearPosition_RF = 0
      if self.GearPosition_LR is None:
        self.GearPosition_LR = 0
      if self.GearPosition_RR is None:
        self.GearPosition_RR = 0
      if self.VCU_Life_Signal is None:
        self.VCU_Life_Signal = 0
      if self.VCU_Mode is None:
        self.VCU_Mode = 0
      if self.EPB_Status is None:
        self.EPB_Status = 0
      if self.IPC_Status is None:
        self.IPC_Status = 0
      if self.Hardware_Error_Level is None:
        self.Hardware_Error_Level = 0
      if self.RemoteController_Status is None:
        self.RemoteController_Status = 0
      if self.SES_F_En_Status is None:
        self.SES_F_En_Status = 0
      if self.SES_R_En_Status is None:
        self.SES_R_En_Status = 0
      if self.DBS_Status is None:
        self.DBS_Status = 0
      if self.Pressure is None:
        self.Pressure = 0.
      if self.SES_F_Error_Level is None:
        self.SES_F_Error_Level = 0
      if self.SES_R_Error_Level is None:
        self.SES_R_Error_Level = 0
      if self.BMS_Error is None:
        self.BMS_Error = 0
      if self.DCDC_Error is None:
        self.DCDC_Error = 0
      if self.EPB_Error is None:
        self.EPB_Error = 0
      if self.DBS_ErrorCode is None:
        self.DBS_ErrorCode = 0
    else:
      self.GearPosition_LF = 0
      self.GearPosition_RF = 0
      self.GearPosition_LR = 0
      self.GearPosition_RR = 0
      self.VCU_Life_Signal = 0
      self.VCU_Mode = 0
      self.EPB_Status = 0
      self.IPC_Status = 0
      self.Hardware_Error_Level = 0
      self.RemoteController_Status = 0
      self.SES_F_En_Status = 0
      self.SES_R_En_Status = 0
      self.DBS_Status = 0
      self.Pressure = 0.
      self.SES_F_Error_Level = 0
      self.SES_R_Error_Level = 0
      self.BMS_Error = 0
      self.DCDC_Error = 0
      self.EPB_Error = 0
      self.DBS_ErrorCode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13Bf6B().pack(_x.GearPosition_LF, _x.GearPosition_RF, _x.GearPosition_LR, _x.GearPosition_RR, _x.VCU_Life_Signal, _x.VCU_Mode, _x.EPB_Status, _x.IPC_Status, _x.Hardware_Error_Level, _x.RemoteController_Status, _x.SES_F_En_Status, _x.SES_R_En_Status, _x.DBS_Status, _x.Pressure, _x.SES_F_Error_Level, _x.SES_R_Error_Level, _x.BMS_Error, _x.DCDC_Error, _x.EPB_Error, _x.DBS_ErrorCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.GearPosition_LF, _x.GearPosition_RF, _x.GearPosition_LR, _x.GearPosition_RR, _x.VCU_Life_Signal, _x.VCU_Mode, _x.EPB_Status, _x.IPC_Status, _x.Hardware_Error_Level, _x.RemoteController_Status, _x.SES_F_En_Status, _x.SES_R_En_Status, _x.DBS_Status, _x.Pressure, _x.SES_F_Error_Level, _x.SES_R_Error_Level, _x.BMS_Error, _x.DCDC_Error, _x.EPB_Error, _x.DBS_ErrorCode,) = _get_struct_13Bf6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13Bf6B().pack(_x.GearPosition_LF, _x.GearPosition_RF, _x.GearPosition_LR, _x.GearPosition_RR, _x.VCU_Life_Signal, _x.VCU_Mode, _x.EPB_Status, _x.IPC_Status, _x.Hardware_Error_Level, _x.RemoteController_Status, _x.SES_F_En_Status, _x.SES_R_En_Status, _x.DBS_Status, _x.Pressure, _x.SES_F_Error_Level, _x.SES_R_Error_Level, _x.BMS_Error, _x.DCDC_Error, _x.EPB_Error, _x.DBS_ErrorCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.GearPosition_LF, _x.GearPosition_RF, _x.GearPosition_LR, _x.GearPosition_RR, _x.VCU_Life_Signal, _x.VCU_Mode, _x.EPB_Status, _x.IPC_Status, _x.Hardware_Error_Level, _x.RemoteController_Status, _x.SES_F_En_Status, _x.SES_R_En_Status, _x.DBS_Status, _x.Pressure, _x.SES_F_Error_Level, _x.SES_R_Error_Level, _x.BMS_Error, _x.DCDC_Error, _x.EPB_Error, _x.DBS_ErrorCode,) = _get_struct_13Bf6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13Bf6B = None
def _get_struct_13Bf6B():
    global _struct_13Bf6B
    if _struct_13Bf6B is None:
        _struct_13Bf6B = struct.Struct("<13Bf6B")
    return _struct_13Bf6B
