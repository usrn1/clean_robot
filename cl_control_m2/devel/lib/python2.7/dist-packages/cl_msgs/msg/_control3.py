# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cl_msgs/control3.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control3(genpy.Message):
  _md5sum = "97f59ffa6578ff05e846f79c2eb2217c"
  _type = "cl_msgs/control3"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 LF_Rpm
uint16 RF_Rpm
uint16 LR_Rpm
uint16 RR_Rpm
uint8 LF_Motor_Gear
uint8 RF_Motor_Gear
uint8 LR_Motor_Gear
uint8 RR_Motor_Gear
uint8 LF_Motor_En
uint8 RF_Motor_En
uint8 LR_Motor_En
uint8 RR_Motor_En
uint8 LF_Motor_Brake
uint8 RF_Motor_Brake
uint8 LR_Motor_Brake
uint8 RR_Motor_Brake

float32 Target_Brk_Press
uint16 Target_Steer_F
uint8 Target_Steer_F_En
uint16 Target_Steer_R
uint8 Target_Steer_R_En
uint8 EPB_Switch
uint8 Target_Mode
"""
  __slots__ = ['LF_Rpm','RF_Rpm','LR_Rpm','RR_Rpm','LF_Motor_Gear','RF_Motor_Gear','LR_Motor_Gear','RR_Motor_Gear','LF_Motor_En','RF_Motor_En','LR_Motor_En','RR_Motor_En','LF_Motor_Brake','RF_Motor_Brake','LR_Motor_Brake','RR_Motor_Brake','Target_Brk_Press','Target_Steer_F','Target_Steer_F_En','Target_Steer_R','Target_Steer_R_En','EPB_Switch','Target_Mode']
  _slot_types = ['uint16','uint16','uint16','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','uint16','uint8','uint16','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LF_Rpm,RF_Rpm,LR_Rpm,RR_Rpm,LF_Motor_Gear,RF_Motor_Gear,LR_Motor_Gear,RR_Motor_Gear,LF_Motor_En,RF_Motor_En,LR_Motor_En,RR_Motor_En,LF_Motor_Brake,RF_Motor_Brake,LR_Motor_Brake,RR_Motor_Brake,Target_Brk_Press,Target_Steer_F,Target_Steer_F_En,Target_Steer_R,Target_Steer_R_En,EPB_Switch,Target_Mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control3, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LF_Rpm is None:
        self.LF_Rpm = 0
      if self.RF_Rpm is None:
        self.RF_Rpm = 0
      if self.LR_Rpm is None:
        self.LR_Rpm = 0
      if self.RR_Rpm is None:
        self.RR_Rpm = 0
      if self.LF_Motor_Gear is None:
        self.LF_Motor_Gear = 0
      if self.RF_Motor_Gear is None:
        self.RF_Motor_Gear = 0
      if self.LR_Motor_Gear is None:
        self.LR_Motor_Gear = 0
      if self.RR_Motor_Gear is None:
        self.RR_Motor_Gear = 0
      if self.LF_Motor_En is None:
        self.LF_Motor_En = 0
      if self.RF_Motor_En is None:
        self.RF_Motor_En = 0
      if self.LR_Motor_En is None:
        self.LR_Motor_En = 0
      if self.RR_Motor_En is None:
        self.RR_Motor_En = 0
      if self.LF_Motor_Brake is None:
        self.LF_Motor_Brake = 0
      if self.RF_Motor_Brake is None:
        self.RF_Motor_Brake = 0
      if self.LR_Motor_Brake is None:
        self.LR_Motor_Brake = 0
      if self.RR_Motor_Brake is None:
        self.RR_Motor_Brake = 0
      if self.Target_Brk_Press is None:
        self.Target_Brk_Press = 0.
      if self.Target_Steer_F is None:
        self.Target_Steer_F = 0
      if self.Target_Steer_F_En is None:
        self.Target_Steer_F_En = 0
      if self.Target_Steer_R is None:
        self.Target_Steer_R = 0
      if self.Target_Steer_R_En is None:
        self.Target_Steer_R_En = 0
      if self.EPB_Switch is None:
        self.EPB_Switch = 0
      if self.Target_Mode is None:
        self.Target_Mode = 0
    else:
      self.LF_Rpm = 0
      self.RF_Rpm = 0
      self.LR_Rpm = 0
      self.RR_Rpm = 0
      self.LF_Motor_Gear = 0
      self.RF_Motor_Gear = 0
      self.LR_Motor_Gear = 0
      self.RR_Motor_Gear = 0
      self.LF_Motor_En = 0
      self.RF_Motor_En = 0
      self.LR_Motor_En = 0
      self.RR_Motor_En = 0
      self.LF_Motor_Brake = 0
      self.RF_Motor_Brake = 0
      self.LR_Motor_Brake = 0
      self.RR_Motor_Brake = 0
      self.Target_Brk_Press = 0.
      self.Target_Steer_F = 0
      self.Target_Steer_F_En = 0
      self.Target_Steer_R = 0
      self.Target_Steer_R_En = 0
      self.EPB_Switch = 0
      self.Target_Mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H12BfHBH3B().pack(_x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm, _x.LF_Motor_Gear, _x.RF_Motor_Gear, _x.LR_Motor_Gear, _x.RR_Motor_Gear, _x.LF_Motor_En, _x.RF_Motor_En, _x.LR_Motor_En, _x.RR_Motor_En, _x.LF_Motor_Brake, _x.RF_Motor_Brake, _x.LR_Motor_Brake, _x.RR_Motor_Brake, _x.Target_Brk_Press, _x.Target_Steer_F, _x.Target_Steer_F_En, _x.Target_Steer_R, _x.Target_Steer_R_En, _x.EPB_Switch, _x.Target_Mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm, _x.LF_Motor_Gear, _x.RF_Motor_Gear, _x.LR_Motor_Gear, _x.RR_Motor_Gear, _x.LF_Motor_En, _x.RF_Motor_En, _x.LR_Motor_En, _x.RR_Motor_En, _x.LF_Motor_Brake, _x.RF_Motor_Brake, _x.LR_Motor_Brake, _x.RR_Motor_Brake, _x.Target_Brk_Press, _x.Target_Steer_F, _x.Target_Steer_F_En, _x.Target_Steer_R, _x.Target_Steer_R_En, _x.EPB_Switch, _x.Target_Mode,) = _get_struct_4H12BfHBH3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H12BfHBH3B().pack(_x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm, _x.LF_Motor_Gear, _x.RF_Motor_Gear, _x.LR_Motor_Gear, _x.RR_Motor_Gear, _x.LF_Motor_En, _x.RF_Motor_En, _x.LR_Motor_En, _x.RR_Motor_En, _x.LF_Motor_Brake, _x.RF_Motor_Brake, _x.LR_Motor_Brake, _x.RR_Motor_Brake, _x.Target_Brk_Press, _x.Target_Steer_F, _x.Target_Steer_F_En, _x.Target_Steer_R, _x.Target_Steer_R_En, _x.EPB_Switch, _x.Target_Mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.LF_Rpm, _x.RF_Rpm, _x.LR_Rpm, _x.RR_Rpm, _x.LF_Motor_Gear, _x.RF_Motor_Gear, _x.LR_Motor_Gear, _x.RR_Motor_Gear, _x.LF_Motor_En, _x.RF_Motor_En, _x.LR_Motor_En, _x.RR_Motor_En, _x.LF_Motor_Brake, _x.RF_Motor_Brake, _x.LR_Motor_Brake, _x.RR_Motor_Brake, _x.Target_Brk_Press, _x.Target_Steer_F, _x.Target_Steer_F_En, _x.Target_Steer_R, _x.Target_Steer_R_En, _x.EPB_Switch, _x.Target_Mode,) = _get_struct_4H12BfHBH3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H12BfHBH3B = None
def _get_struct_4H12BfHBH3B():
    global _struct_4H12BfHBH3B
    if _struct_4H12BfHBH3B is None:
        _struct_4H12BfHBH3B = struct.Struct("<4H12BfHBH3B")
    return _struct_4H12BfHBH3B
