// Generated by gencpp from file cl_msgs/control1.msg
// DO NOT EDIT!


#ifndef CL_MSGS_MESSAGE_CONTROL1_H
#define CL_MSGS_MESSAGE_CONTROL1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cl_msgs
{
template <class ContainerAllocator>
struct control1_
{
  typedef control1_<ContainerAllocator> Type;

  control1_()
    : LF_Rpm(0)
    , RF_Rpm(0)
    , LR_Rpm(0)
    , RR_Rpm(0)
    , LF_Motor_Gear(0)
    , RF_Motor_Gear(0)
    , LR_Motor_Gear(0)
    , RR_Motor_Gear(0)
    , LF_Motor_En(0)
    , RF_Motor_En(0)
    , LR_Motor_En(0)
    , RR_Motor_En(0)
    , LF_Motor_Brake(0)
    , RF_Motor_Brake(0)
    , LR_Motor_Brake(0)
    , RR_Motor_Brake(0)  {
    }
  control1_(const ContainerAllocator& _alloc)
    : LF_Rpm(0)
    , RF_Rpm(0)
    , LR_Rpm(0)
    , RR_Rpm(0)
    , LF_Motor_Gear(0)
    , RF_Motor_Gear(0)
    , LR_Motor_Gear(0)
    , RR_Motor_Gear(0)
    , LF_Motor_En(0)
    , RF_Motor_En(0)
    , LR_Motor_En(0)
    , RR_Motor_En(0)
    , LF_Motor_Brake(0)
    , RF_Motor_Brake(0)
    , LR_Motor_Brake(0)
    , RR_Motor_Brake(0)  {
  (void)_alloc;
    }



   typedef uint16_t _LF_Rpm_type;
  _LF_Rpm_type LF_Rpm;

   typedef uint16_t _RF_Rpm_type;
  _RF_Rpm_type RF_Rpm;

   typedef uint16_t _LR_Rpm_type;
  _LR_Rpm_type LR_Rpm;

   typedef uint16_t _RR_Rpm_type;
  _RR_Rpm_type RR_Rpm;

   typedef uint8_t _LF_Motor_Gear_type;
  _LF_Motor_Gear_type LF_Motor_Gear;

   typedef uint8_t _RF_Motor_Gear_type;
  _RF_Motor_Gear_type RF_Motor_Gear;

   typedef uint8_t _LR_Motor_Gear_type;
  _LR_Motor_Gear_type LR_Motor_Gear;

   typedef uint8_t _RR_Motor_Gear_type;
  _RR_Motor_Gear_type RR_Motor_Gear;

   typedef uint8_t _LF_Motor_En_type;
  _LF_Motor_En_type LF_Motor_En;

   typedef uint8_t _RF_Motor_En_type;
  _RF_Motor_En_type RF_Motor_En;

   typedef uint8_t _LR_Motor_En_type;
  _LR_Motor_En_type LR_Motor_En;

   typedef uint8_t _RR_Motor_En_type;
  _RR_Motor_En_type RR_Motor_En;

   typedef uint8_t _LF_Motor_Brake_type;
  _LF_Motor_Brake_type LF_Motor_Brake;

   typedef uint8_t _RF_Motor_Brake_type;
  _RF_Motor_Brake_type RF_Motor_Brake;

   typedef uint8_t _LR_Motor_Brake_type;
  _LR_Motor_Brake_type LR_Motor_Brake;

   typedef uint8_t _RR_Motor_Brake_type;
  _RR_Motor_Brake_type RR_Motor_Brake;





  typedef boost::shared_ptr< ::cl_msgs::control1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cl_msgs::control1_<ContainerAllocator> const> ConstPtr;

}; // struct control1_

typedef ::cl_msgs::control1_<std::allocator<void> > control1;

typedef boost::shared_ptr< ::cl_msgs::control1 > control1Ptr;
typedef boost::shared_ptr< ::cl_msgs::control1 const> control1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cl_msgs::control1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cl_msgs::control1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cl_msgs::control1_<ContainerAllocator1> & lhs, const ::cl_msgs::control1_<ContainerAllocator2> & rhs)
{
  return lhs.LF_Rpm == rhs.LF_Rpm &&
    lhs.RF_Rpm == rhs.RF_Rpm &&
    lhs.LR_Rpm == rhs.LR_Rpm &&
    lhs.RR_Rpm == rhs.RR_Rpm &&
    lhs.LF_Motor_Gear == rhs.LF_Motor_Gear &&
    lhs.RF_Motor_Gear == rhs.RF_Motor_Gear &&
    lhs.LR_Motor_Gear == rhs.LR_Motor_Gear &&
    lhs.RR_Motor_Gear == rhs.RR_Motor_Gear &&
    lhs.LF_Motor_En == rhs.LF_Motor_En &&
    lhs.RF_Motor_En == rhs.RF_Motor_En &&
    lhs.LR_Motor_En == rhs.LR_Motor_En &&
    lhs.RR_Motor_En == rhs.RR_Motor_En &&
    lhs.LF_Motor_Brake == rhs.LF_Motor_Brake &&
    lhs.RF_Motor_Brake == rhs.RF_Motor_Brake &&
    lhs.LR_Motor_Brake == rhs.LR_Motor_Brake &&
    lhs.RR_Motor_Brake == rhs.RR_Motor_Brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cl_msgs::control1_<ContainerAllocator1> & lhs, const ::cl_msgs::control1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cl_msgs::control1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cl_msgs::control1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cl_msgs::control1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cl_msgs::control1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cl_msgs::control1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cl_msgs::control1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cl_msgs::control1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c19fad33fe2c8cea2d2038649cc83ea";
  }

  static const char* value(const ::cl_msgs::control1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c19fad33fe2c8ceULL;
  static const uint64_t static_value2 = 0xa2d2038649cc83eaULL;
};

template<class ContainerAllocator>
struct DataType< ::cl_msgs::control1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cl_msgs/control1";
  }

  static const char* value(const ::cl_msgs::control1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cl_msgs::control1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 LF_Rpm\n"
"uint16 RF_Rpm\n"
"uint16 LR_Rpm\n"
"uint16 RR_Rpm\n"
"uint8 LF_Motor_Gear\n"
"uint8 RF_Motor_Gear\n"
"uint8 LR_Motor_Gear\n"
"uint8 RR_Motor_Gear\n"
"uint8 LF_Motor_En\n"
"uint8 RF_Motor_En\n"
"uint8 LR_Motor_En\n"
"uint8 RR_Motor_En\n"
"uint8 LF_Motor_Brake\n"
"uint8 RF_Motor_Brake\n"
"uint8 LR_Motor_Brake\n"
"uint8 RR_Motor_Brake\n"
;
  }

  static const char* value(const ::cl_msgs::control1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cl_msgs::control1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LF_Rpm);
      stream.next(m.RF_Rpm);
      stream.next(m.LR_Rpm);
      stream.next(m.RR_Rpm);
      stream.next(m.LF_Motor_Gear);
      stream.next(m.RF_Motor_Gear);
      stream.next(m.LR_Motor_Gear);
      stream.next(m.RR_Motor_Gear);
      stream.next(m.LF_Motor_En);
      stream.next(m.RF_Motor_En);
      stream.next(m.LR_Motor_En);
      stream.next(m.RR_Motor_En);
      stream.next(m.LF_Motor_Brake);
      stream.next(m.RF_Motor_Brake);
      stream.next(m.LR_Motor_Brake);
      stream.next(m.RR_Motor_Brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cl_msgs::control1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cl_msgs::control1_<ContainerAllocator>& v)
  {
    s << indent << "LF_Rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LF_Rpm);
    s << indent << "RF_Rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RF_Rpm);
    s << indent << "LR_Rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LR_Rpm);
    s << indent << "RR_Rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RR_Rpm);
    s << indent << "LF_Motor_Gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LF_Motor_Gear);
    s << indent << "RF_Motor_Gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RF_Motor_Gear);
    s << indent << "LR_Motor_Gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LR_Motor_Gear);
    s << indent << "RR_Motor_Gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RR_Motor_Gear);
    s << indent << "LF_Motor_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LF_Motor_En);
    s << indent << "RF_Motor_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RF_Motor_En);
    s << indent << "LR_Motor_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LR_Motor_En);
    s << indent << "RR_Motor_En: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RR_Motor_En);
    s << indent << "LF_Motor_Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LF_Motor_Brake);
    s << indent << "RF_Motor_Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RF_Motor_Brake);
    s << indent << "LR_Motor_Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LR_Motor_Brake);
    s << indent << "RR_Motor_Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RR_Motor_Brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CL_MSGS_MESSAGE_CONTROL1_H
