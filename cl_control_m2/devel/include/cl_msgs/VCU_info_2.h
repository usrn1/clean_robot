// Generated by gencpp from file cl_msgs/VCU_info_2.msg
// DO NOT EDIT!


#ifndef CL_MSGS_MESSAGE_VCU_INFO_2_H
#define CL_MSGS_MESSAGE_VCU_INFO_2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cl_msgs
{
template <class ContainerAllocator>
struct VCU_info_2_
{
  typedef VCU_info_2_<ContainerAllocator> Type;

  VCU_info_2_()
    : GearPosition_LF(0)
    , GearPosition_RF(0)
    , GearPosition_LR(0)
    , GearPosition_RR(0)
    , VCU_Life_Signal(0)
    , VCU_Mode(0)
    , EPB_Status(0)
    , IPC_Status(0)
    , Hardware_Error_Level(0)
    , RemoteController_Status(0)
    , SES_F_En_Status(0)
    , SES_R_En_Status(0)
    , DBS_Status(0)
    , Pressure(0.0)
    , SES_F_Error_Level(0)
    , SES_R_Error_Level(0)
    , BMS_Error(0)
    , DCDC_Error(0)
    , EPB_Error(0)
    , DBS_ErrorCode(0)  {
    }
  VCU_info_2_(const ContainerAllocator& _alloc)
    : GearPosition_LF(0)
    , GearPosition_RF(0)
    , GearPosition_LR(0)
    , GearPosition_RR(0)
    , VCU_Life_Signal(0)
    , VCU_Mode(0)
    , EPB_Status(0)
    , IPC_Status(0)
    , Hardware_Error_Level(0)
    , RemoteController_Status(0)
    , SES_F_En_Status(0)
    , SES_R_En_Status(0)
    , DBS_Status(0)
    , Pressure(0.0)
    , SES_F_Error_Level(0)
    , SES_R_Error_Level(0)
    , BMS_Error(0)
    , DCDC_Error(0)
    , EPB_Error(0)
    , DBS_ErrorCode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _GearPosition_LF_type;
  _GearPosition_LF_type GearPosition_LF;

   typedef uint8_t _GearPosition_RF_type;
  _GearPosition_RF_type GearPosition_RF;

   typedef uint8_t _GearPosition_LR_type;
  _GearPosition_LR_type GearPosition_LR;

   typedef uint8_t _GearPosition_RR_type;
  _GearPosition_RR_type GearPosition_RR;

   typedef uint8_t _VCU_Life_Signal_type;
  _VCU_Life_Signal_type VCU_Life_Signal;

   typedef uint8_t _VCU_Mode_type;
  _VCU_Mode_type VCU_Mode;

   typedef uint8_t _EPB_Status_type;
  _EPB_Status_type EPB_Status;

   typedef uint8_t _IPC_Status_type;
  _IPC_Status_type IPC_Status;

   typedef uint8_t _Hardware_Error_Level_type;
  _Hardware_Error_Level_type Hardware_Error_Level;

   typedef uint8_t _RemoteController_Status_type;
  _RemoteController_Status_type RemoteController_Status;

   typedef uint8_t _SES_F_En_Status_type;
  _SES_F_En_Status_type SES_F_En_Status;

   typedef uint8_t _SES_R_En_Status_type;
  _SES_R_En_Status_type SES_R_En_Status;

   typedef uint8_t _DBS_Status_type;
  _DBS_Status_type DBS_Status;

   typedef float _Pressure_type;
  _Pressure_type Pressure;

   typedef uint8_t _SES_F_Error_Level_type;
  _SES_F_Error_Level_type SES_F_Error_Level;

   typedef uint8_t _SES_R_Error_Level_type;
  _SES_R_Error_Level_type SES_R_Error_Level;

   typedef uint8_t _BMS_Error_type;
  _BMS_Error_type BMS_Error;

   typedef uint8_t _DCDC_Error_type;
  _DCDC_Error_type DCDC_Error;

   typedef uint8_t _EPB_Error_type;
  _EPB_Error_type EPB_Error;

   typedef uint8_t _DBS_ErrorCode_type;
  _DBS_ErrorCode_type DBS_ErrorCode;





  typedef boost::shared_ptr< ::cl_msgs::VCU_info_2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cl_msgs::VCU_info_2_<ContainerAllocator> const> ConstPtr;

}; // struct VCU_info_2_

typedef ::cl_msgs::VCU_info_2_<std::allocator<void> > VCU_info_2;

typedef boost::shared_ptr< ::cl_msgs::VCU_info_2 > VCU_info_2Ptr;
typedef boost::shared_ptr< ::cl_msgs::VCU_info_2 const> VCU_info_2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cl_msgs::VCU_info_2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cl_msgs::VCU_info_2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cl_msgs::VCU_info_2_<ContainerAllocator1> & lhs, const ::cl_msgs::VCU_info_2_<ContainerAllocator2> & rhs)
{
  return lhs.GearPosition_LF == rhs.GearPosition_LF &&
    lhs.GearPosition_RF == rhs.GearPosition_RF &&
    lhs.GearPosition_LR == rhs.GearPosition_LR &&
    lhs.GearPosition_RR == rhs.GearPosition_RR &&
    lhs.VCU_Life_Signal == rhs.VCU_Life_Signal &&
    lhs.VCU_Mode == rhs.VCU_Mode &&
    lhs.EPB_Status == rhs.EPB_Status &&
    lhs.IPC_Status == rhs.IPC_Status &&
    lhs.Hardware_Error_Level == rhs.Hardware_Error_Level &&
    lhs.RemoteController_Status == rhs.RemoteController_Status &&
    lhs.SES_F_En_Status == rhs.SES_F_En_Status &&
    lhs.SES_R_En_Status == rhs.SES_R_En_Status &&
    lhs.DBS_Status == rhs.DBS_Status &&
    lhs.Pressure == rhs.Pressure &&
    lhs.SES_F_Error_Level == rhs.SES_F_Error_Level &&
    lhs.SES_R_Error_Level == rhs.SES_R_Error_Level &&
    lhs.BMS_Error == rhs.BMS_Error &&
    lhs.DCDC_Error == rhs.DCDC_Error &&
    lhs.EPB_Error == rhs.EPB_Error &&
    lhs.DBS_ErrorCode == rhs.DBS_ErrorCode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cl_msgs::VCU_info_2_<ContainerAllocator1> & lhs, const ::cl_msgs::VCU_info_2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cl_msgs::VCU_info_2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cl_msgs::VCU_info_2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cl_msgs::VCU_info_2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1fba2325979e73c72ceeacbad9e46de";
  }

  static const char* value(const ::cl_msgs::VCU_info_2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1fba2325979e73cULL;
  static const uint64_t static_value2 = 0x72ceeacbad9e46deULL;
};

template<class ContainerAllocator>
struct DataType< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cl_msgs/VCU_info_2";
  }

  static const char* value(const ::cl_msgs::VCU_info_2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 GearPosition_LF\n"
"uint8 GearPosition_RF\n"
"uint8 GearPosition_LR\n"
"uint8 GearPosition_RR\n"
"uint8 VCU_Life_Signal\n"
"uint8 VCU_Mode\n"
"uint8 EPB_Status\n"
"uint8 IPC_Status\n"
"uint8 Hardware_Error_Level\n"
"uint8 RemoteController_Status\n"
"uint8 SES_F_En_Status\n"
"uint8 SES_R_En_Status\n"
"uint8 DBS_Status\n"
"float32 Pressure\n"
"uint8 SES_F_Error_Level\n"
"uint8 SES_R_Error_Level\n"
"uint8 BMS_Error\n"
"uint8 DCDC_Error\n"
"uint8 EPB_Error\n"
"uint8 DBS_ErrorCode\n"
;
  }

  static const char* value(const ::cl_msgs::VCU_info_2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GearPosition_LF);
      stream.next(m.GearPosition_RF);
      stream.next(m.GearPosition_LR);
      stream.next(m.GearPosition_RR);
      stream.next(m.VCU_Life_Signal);
      stream.next(m.VCU_Mode);
      stream.next(m.EPB_Status);
      stream.next(m.IPC_Status);
      stream.next(m.Hardware_Error_Level);
      stream.next(m.RemoteController_Status);
      stream.next(m.SES_F_En_Status);
      stream.next(m.SES_R_En_Status);
      stream.next(m.DBS_Status);
      stream.next(m.Pressure);
      stream.next(m.SES_F_Error_Level);
      stream.next(m.SES_R_Error_Level);
      stream.next(m.BMS_Error);
      stream.next(m.DCDC_Error);
      stream.next(m.EPB_Error);
      stream.next(m.DBS_ErrorCode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VCU_info_2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cl_msgs::VCU_info_2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cl_msgs::VCU_info_2_<ContainerAllocator>& v)
  {
    s << indent << "GearPosition_LF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearPosition_LF);
    s << indent << "GearPosition_RF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearPosition_RF);
    s << indent << "GearPosition_LR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearPosition_LR);
    s << indent << "GearPosition_RR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearPosition_RR);
    s << indent << "VCU_Life_Signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCU_Life_Signal);
    s << indent << "VCU_Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCU_Mode);
    s << indent << "EPB_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB_Status);
    s << indent << "IPC_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IPC_Status);
    s << indent << "Hardware_Error_Level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Hardware_Error_Level);
    s << indent << "RemoteController_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemoteController_Status);
    s << indent << "SES_F_En_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SES_F_En_Status);
    s << indent << "SES_R_En_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SES_R_En_Status);
    s << indent << "DBS_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DBS_Status);
    s << indent << "Pressure: ";
    Printer<float>::stream(s, indent + "  ", v.Pressure);
    s << indent << "SES_F_Error_Level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SES_F_Error_Level);
    s << indent << "SES_R_Error_Level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SES_R_Error_Level);
    s << indent << "BMS_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BMS_Error);
    s << indent << "DCDC_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DCDC_Error);
    s << indent << "EPB_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB_Error);
    s << indent << "DBS_ErrorCode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DBS_ErrorCode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CL_MSGS_MESSAGE_VCU_INFO_2_H
